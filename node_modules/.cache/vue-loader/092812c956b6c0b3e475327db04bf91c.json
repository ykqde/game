{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\company\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\company\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\company\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\company\\src\\views\\privacy\\privacy.vue?vue&type=template&id=3e33b752&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\company\\src\\views\\privacy\\privacy.vue","mtime":1653876820049},{"path":"C:\\Users\\Administrator\\Desktop\\company\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651916147496},{"path":"C:\\Users\\Administrator\\Desktop\\company\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651916150240},{"path":"C:\\Users\\Administrator\\Desktop\\company\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651916147496},{"path":"C:\\Users\\Administrator\\Desktop\\company\\node_modules\\vue-loader\\lib\\index.js","mtime":1651916149653}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAicHJpdmFjeSIgfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgImVsLWNvbnRhaW5lciIsCiAgICAgICAgWwogICAgICAgICAgX2MoImVsLWhlYWRlciIsIHsgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiYXV0byIgfSB9KSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZWwtbWFpbiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsYXl1aS1jb250YWluZXIiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiTWVudSIsIFtfdm0uX3YoIlByaXZhY3kgUG9saWN5IildKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJlbC1yb3ciLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyB0eXBlOiAiZmxleCIsIGp1c3RpZnk6ICJzdGFydCIsIGFsaWduOiAibWlkZGxlIiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJlbC1jb2wiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGF5dWktY29udGFpbmVyIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGxnOiB7IHNwYW46IDI0IH0sIHhzOiB7IHNwYW46IDIyLCBvZmZzZXQ6IDEgfSB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJpdmFjeSBQb2xpY3kiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInByaXZhY3lfdHh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIyNHB4IDAgMTBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiVGhhbmsgeW91IGZvciB2aXNpdGluZyBCdXllclJldmlld3Mub3JnLCBhIHByb2R1Y3Rpb24gb2YgQnV5ZXJSZXZpZXdzLm9yZywgSW5jLiAo4oCcQnV5ZXJSZXZpZXdzLm9yZ+KAnSwg4oCcd2XigJ0sIOKAnHVz4oCdIG9yIOKAnG91cuKAnSkuIEF0IEJ1eWVyUmV2aWV3cy5vcmcsIHdlIHJlc3BlY3QgeW91ciBwcml2YWN5LCBhbmQgd2UgdW5kZXJzdGFuZCB0aGUgaW1wb3J0YW5jZSBvZiB0aGUgaW5mb3JtYXRpb24geW91IGVudHJ1c3QgdG8gdXMuIFRoaXMgUHJpdmFjeSBQb2xpY3kgZGVzY3JpYmVzIG91ciBwcmFjdGljZXMgY29uY2VybmluZyB0aGUgaW5mb3JtYXRpb24gY29sbGVjdGVkIHRocm91Z2ggb3VyIHdlYnNpdGUgKHdoZXRoZXIgZXhpc3Rpbmcgbm93IG9yIGluIHRoZSBmdXR1cmUsIGNvbGxlY3RpdmVseSwgdGhlIOKAnFNlcnZpY2Vz4oCdKS4gQmVsb3cgd2UgZGVzY3JpYmUgd2hhdCBpbmZvcm1hdGlvbiB3ZSBjb2xsZWN0IHdoZW4geW91IHVzZSB0aGUgU2VydmljZXMsIGhvdyB3ZSBwcm90ZWN0IHRoYXQgaW5mb3JtYXRpb24sIHdpdGggd2hvbSB3ZSBzaGFyZSBpdCwgYW5kIHdoYXQgeW91ciBwcml2YWN5IG9wdGlvbnMgYXJlLiBCeSB1c2luZyB0aGUgU2VydmljZXMsIHlvdSBjb25zZW50IHRvIG91ciBjb2xsZWN0aW9uIGFuZCB1c2Ugb2YgeW91ciBkYXRhIGFzIGRlc2NyaWJlZCBpbiB0aGlzIFByaXZhY3kgUG9saWN5LiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDEwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlRoaXMgUHJpdmFjeSBQb2xpY3kgb25seSBhcHBsaWVzIHRvIHByb3BlcnRpZXMgd2Ugb3duIGFuZCBvcGVyYXRlLiBPdXIgcHJvcGVydGllcyBtYXkgcHJvdmlkZSBsaW5rcyB0byB0aGlyZCBwYXJ0eSB3ZWJzaXRlcyBhbmQgdGhpcyBQcml2YWN5IFBvbGljeSB3aWxsIG5vdCBhcHBseSB0byBhbnkgaW5mb3JtYXRpb24geW91IG1heSBwcm92aWRlIHdoaWxlIG9uIHN1Y2ggdGhpcmQgcGFydHkgd2Vic2l0ZXMuIFdlIHdpbGwgY29udGludWUgdG8gZXZhbHVhdGUgdGhpcyBQcml2YWN5IFBvbGljeSBhZ2FpbnN0IG5ldyB0ZWNobm9sb2dpZXMsIGJ1c2luZXNzIHByYWN0aWNlcywgYW5kIG91ciB1c2Vyc+KAmSBuZWVkcywgYW5kIG1heSBtYWtlIGNoYW5nZXMgdG8gdGhlIFByaXZhY3kgUG9saWN5IGFjY29yZGluZ2x5LiBQbGVhc2UgY2hlY2sgdGhpcyBwYWdlIHBlcmlvZGljYWxseSBmb3IgdXBkYXRlcy4gSWYgd2UgbWFrZSBhbnkgbWF0ZXJpYWwgY2hhbmdlcyB0byB0aGlzIFByaXZhY3kgUG9saWN5LCB3ZSB3aWxsIHBvc3QgdGhlIHVwZGF0ZWQgUHJpdmFjeSBQb2xpY3kgaGVyZSwgYWxvbmcgd2l0aCBpdHMgZWZmZWN0aXZlIGRhdGUsIGFuZCBub3RpZnkgeW91IGJ5IG1lYW5zIG9mIGEgbm90aWNlIG9uIG91ciB3ZWJzaXRlLiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogIjYwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiIzAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogIjIwcHggMCAwcHggMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjEuVGhlIEluZm9ybWF0aW9uIFdlIENvbGxlY3QiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIldlIGV4cGxhaW4gdGhlIHR3byB3YXlzIHRoYXQgd2UgY29sbGVjdCBhbmQgcHJvY2VzcyBpbmZvcm1hdGlvbiBhYm91dCB5b3UuIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICIyMHB4IDAgMjBweCAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogIjYwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiIzAwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjIuSW5mb3JtYXRpb24gWW91IFByb3ZpZGUgdG8gVXMiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9uZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogIjYwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMDAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiMy5GZWVkYmFjayBhbmQgRW1haWwgTmV3c2xldHRlcjoiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgWW91IG1heSBjaG9vc2UgdG8gc3VibWl0IGZlZWRiYWNrIChzdWNoIGFzIHJldmlld3MsIHRpcHMsIG9yIGNvbW1lbnRzKSB0aGF0IG1heSBiZSBzaGFyZWQgd2l0aCBvdGhlcnMgdGhyb3VnaCBvdXIgU2VydmljZXMuIFRoZSBmZWVkYmFjayB0aGF0IHlvdSBzdWJtaXQgdGhyb3VnaCB0aGUgU2VydmljZXMgbWF5IGJlIG1hZGUgYXZhaWxhYmxlIGZvciBvdGhlciB1c2VycyBvZiBDb25zdW1lciBTZWFyY2guY29tIHRvIHJlYWQuIFdlIG1heSBhbHNvIGRpc3BsYXkgeW91ciBmZWVkYmFjayBvbiB0aGUgU2VydmljZXMsIHNoYXJlIGl0IHdpdGggYnVzaW5lc3NlcywgYW5kIGZ1cnRoZXIgZGlzdHJpYnV0ZSBpdCB0byBhIHdpZGVyIGF1ZGllbmNlIHRocm91Z2ggdGhpcmQgcGFydHkgc2l0ZXMgYW5kIHNlcnZpY2VzLiBXZSB3aWxsIGhvd2V2ZXIgb25seSB1c2UgeW91ciBuYW1lIGFuZC9vciBlbWFpbCBhZGRyZXNzIGZvciB0aGUgcHVycG9zZSBvZiBhbnN3ZXJpbmcgdG8geW91ciBmZWVkYmFjayBhbmQgd2hlbiB5b3Ugc2lnbiB1cCB0byByZWNlaXZlIG91ciBlbWFpbCBuZXdzbGV0dGVyLiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDIwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb25nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQiOiAiNjAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIiMwMDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCI0LkNvbW11bmljYXRpb25zOiIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIklmIHlvdSBwYXJ0aWNpcGF0ZSBpbiBhIHN1cnZleSwgcG9sbCwgcHJvbW90aW9uLCBjb250ZXN0LCBvciBzd2VlcHN0YWtlczsgc3VibWl0IGEgY3VzdG9tZXIgc2VydmljZSBvciBvdGhlciBpbnF1aXJ5IHRvIHVzOyByZXF1ZXN0IHRvIHJlY2VpdmUgY2VydGFpbiBjb21tdW5pY2F0aW9ucyBmcm9tIHVzOyBvciBjb250YWN0IHVzIGFib3V0IGVtcGxveW1lbnQgb3Bwb3J0dW5pdGllcyBwb3N0ZWQgdG8gdGhlIFNlcnZpY2VzLCB3ZSBtYXkgY29sbGVjdCBjb250YWN0IGluZm9ybWF0aW9uIHN1Y2ggYXMgeW91ciBuYW1lLCBhZGRyZXNzLCBlbWFpbCBhZGRyZXNzLCBvciB0ZWxlcGhvbmUgbnVtYmVyLiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDIwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb25nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQiOiAiNjAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIiMwMDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiNS5JbmZvcm1hdGlvbiBXZSBDb2xsZWN0IGFib3V0IHlvdXIgY29tcHV0ZXIgb3IgbW9iaWxlIGRldmljZSB3aGVuIHlvdSBVc2UgdGhlIFNlcnZpY2VzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiV2hlbiB5b3UgdXNlIHRoZSBTZXJ2aWNlcywgd2UgYXV0b21hdGljYWxseSBjb2xsZWN0IGFuZCBzdG9yZSBjZXJ0YWluIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgY29tcHV0ZXIgb3IgZGV2aWNlIGFuZCB5b3VyIGFjdGl2aXRpZXMsIGluY2x1ZGluZzoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAxMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIDEuSVAgYWRkcmVzcyBvZiB5b3VyIGNvbXB1dGVyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgMi5VbmlxdWUgbW9iaWxlIGRldmljZSBpZGVudGlmaWVyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAzLlRlY2huaWNhbCBpbmZvcm1hdGlvbiBhYm91dCB5b3VyIGNvbXB1dGVyIG9yIG1vYmlsZSBkZXZpY2Ugc3VjaCBhcyB0eXBlIG9mIGRldmljZSwgbW9iaWxlIGRldmljZSBJRCBudW1iZXIsIHdlYiBicm93c2VyIChJbnRlcm5ldCBFeHBsb3JlciA4LCBldGMuKSwgb3RoZXIgYnJvd3NlciBpbmZvcm1hdGlvbiAoZS5nLiBzaXplLCBjb25uZWN0aW9uIHNwZWVkIGFuZCBjb25uZWN0aW9uIHR5cGUpLCBhbmQgb3BlcmF0aW5nIHN5c3RlbSBvciBwbGF0Zm9ybSAoTWFjLCBXaW5kb3dzIFhQLCBldGMuKSIKICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgNC5Zb3VyIHByZWZlcmVuY2VzIGFuZCBzZXR0aW5ncyAodGltZSB6b25lLCBsYW5ndWFnZSwgZXRjLikiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIDUuSWYgeW91IGFyZSB1c2luZyBhIG1vYmlsZSBkZXZpY2UsIHlvdXIgbW9iaWxlIGRldmljZeKAmXMgZ2VvZ3JhcGhpYyBsb2NhdGlvbiAoc3BlY2lmaWMgZ2VvZ3JhcGhpYyBsb2NhdGlvbiBpZiB5b3UgaGF2ZSBlbmFibGVkIGNvbGxlY3Rpb24gb2YgdGhhdCBpbmZvcm1hdGlvbiwgb3IgZ2VuZXJhbCBnZW9ncmFwaGljIGxvY2F0aW9uIGF1dG9tYXRpY2FsbHkpLiBQbGVhc2Ugc2VlIHRoZSBzZWN0aW9uIOKAnEFib3V0IExvY2F0aW9uIEluZm9ybWF0aW9u4oCdYmVsb3cgZm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24uIgogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiA2LkludGVybmV0IHByb3ZpZGVyIChWZXJpem9uLCBDb21jYXN0LCBldGMuKSBvciBtb2JpbGUgY2FycmllciBuYW1lIChBVCZULCBTcHJpbnQsIFQtTW9iaWxlLCBldGMuKSIKICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgNy5UaGUgVVJMIG9mIHRoZSBsYXN0IHdlYnBhZ2UgeW91IHZpc2l0ZWQgYmVmb3JlIHZpc2l0aW5nIEJ1eWVyUmV2aWV3cy5vcmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIDguSW5mb3JtYXRpb24gYWJvdXQgeW91ciBhY3Rpdml0eSBvbiB0aGUgU2VydmljZXMgKGUuZy4sIHlvdXIgc2VhcmNoIHF1ZXJpZXMsIHNlYXJjaCByZXN1bHRzIHNlbGVjdGVkLCBjbGlja3MsIHBhZ2VzIHZpZXdlZCwgaG93IGxvbmcgeW91IHZpc2l0ZWQgb3VyIFNlcnZpY2VzLCBldGMuKSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjQwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9uZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogIjYwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMDAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQWJvdXQgTG9jYXRpb24gSW5mb3JtYXRpb24iKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDEwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIldoZW4geW91IHVzZSBvbmUgb2Ygb3VyIGxvY2F0aW9uLWVuYWJsZWQgc2VydmljZXMgKGZvciBleGFtcGxlLCB3aGVuIHlvdSBhY2Nlc3MgU2VydmljZXMgZnJvbSBhIG1vYmlsZSBkZXZpY2UpLCB3ZSBtYXkgbmVlZCB0byBjb2xsZWN0IGFuZCBwcm9jZXNzIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgYWN0dWFsIEdQUyBsb2NhdGlvbiAoaW5jbHVkaW5nIHRoZSBsYXRpdHVkZSwgbG9uZ2l0dWRlIG9yIGFsdGl0dWRlIG9mIHlvdXIgbW9iaWxlIGRldmljZSkgYW5kIHRoZSB0aW1lIHRoZSBsb2NhdGlvbiBpbmZvcm1hdGlvbiB3YXMgcmVjb3JkZWQuIFNvbWUgb2YgdGhlc2Ugc2VydmljZXMgcmVxdWlyZSB5b3VyIHBlcnNvbmFsIGRhdGEgZm9yIHRoZSBmZWF0dXJlIHRvIHdvcmsgYW5kIHdlIG1heSBhc3NvY2lhdGUgbG9jYXRpb24gZGF0YSB3aXRoIHlvdXIgZGV2aWNlIElEIGFuZCBvdGhlciBpbmZvcm1hdGlvbiB3ZSBob2xkIGFib3V0IHlvdS4gV2Uga2VlcCB0aGlzIGRhdGEgZm9yIG5vIGxvbmdlciB0aGFuIGlzIHJlYXNvbmFibHkgbmVjZXNzYXJ5IGZvciBwcm92aWRpbmcgb3VyIHNlcnZpY2VzLiBJZiB5b3Ugd2lzaCB0byB1c2UgdGhlIHBhcnRpY3VsYXIgZmVhdHVyZSwgeW91IHdpbGwgYmUgYXNrZWQgdG8gY29uc2VudCB0byB5b3VyIGRhdGEgYmVpbmcgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLiBZb3UgY2FuIHdpdGhkcmF3IHlvdXIgY29uc2VudCBhdCBhbnkgdGltZSBieSBkaXNhYmxpbmcgdGhlIHJlbGV2YW50IGZlYXR1cmUuIFdlIGhhdmUgZXhwbGFpbmVkIGhvdyB5b3UgY2FuIGRpc2FibGUgdGhlIGNvbGxlY3Rpb24gb2YgTW9iaWxlIERldmljZSBMb2NhdGlvbiBJbmZvcm1hdGlvbiBiZWxvdzoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjYwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9uZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogIjYwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMDAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkhvdyB0byBEaXNhYmxlIHRoZSBDb2xsZWN0aW9uIG9mIE1vYmlsZSBEZXZpY2UgTG9jYXRpb24gSW5mb3JtYXRpb24uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAxMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJsaXN0X3N0eSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIklmIHlvdSBkbyBub3Qgd2FudCB5b3VyIGxvY2F0aW9uIGluZm9ybWF0aW9uIGNvbGxlY3RlZCB3aGVuIHlvdSB1c2UgdGhlIFNlcnZpY2VzIGZyb20gYSBtb2JpbGUgZGV2aWNlLCBwbGVhc2UgZm9sbG93IHRoZXNlIGluc3RydWN0aW9uczoiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIklmIHlvdSBhcmUgdXNpbmcgYW4gQXBwbGUgZGV2aWNlLCBjbGljayBvbiDigJxHZW5lcmFsLOKAnSB0aGVuIOKAnFJlc2V0LOKAnSB0aGVuIOKAnFJlc2V0IExvY2F0aW9uIGFuZCBQcml2YWN5LuKAnSBUaGlzIHdpbGwgdHVybiBvZmYgbG9jYXRpb24gZnVuY3Rpb25hbGl0eSBmb3IgYWxsIG9mIHlvdXIgYXBwcyBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgeW91IGRvd25sb2FkIG9yIHVzZSBhbiBhcHAsIHlvdSB3aWxsIGJlIGFza2VkIGFnYWluIHRvIHByb3ZpZGUgeW91ciBjb25zZW50IGZvciB1cyBhbmQgb3RoZXJzIHRvIGFjY2VzcyB5b3VyIGxvY2F0aW9uIGluZm9ybWF0aW9uLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiSWYgeW91IGFyZSB1c2luZyBhbiBBbmRyb2lkIGRldmljZSwgdmlzaXQgZGV2aWNlIHNldHRpbmdzLCBjbGljayDigJxMb2NhdGlvbizigJ0gYW5kIHRoZW4gY2xpY2sgdGhlIGJveGVzIGZvciB0aGUgcGFydGljdWxhciBhcHBsaWNhdGlvbnMgZm9yIHdoaWNoIHlvdSB3b3VsZCBsaWtlIHRvIGRpc2FibGUgbG9jYXRpb24gc2VydmljZXMuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJJZiB5b3VyIGRldmljZSBjaGFuZ2VzIHRoZSBhYm92ZSBtZXRob2RzIG9mIGRpc2FibGluZyB0aGUgY29sbGVjdGlvbiBvZiBtb2JpbGUgZGV2aWNlIGxvY2F0aW9uLCBwbGVhc2UgY29udGFjdCB5b3VyIGRldmljZSBtYW51ZmFjdHVyZXIgb3IgcGxhdGZvcm0gcHJvdmlkZXIgdG8gZGV0ZXJtaW5lIGhvdyB0byBkaXNhYmxlIHRoZSBjb2xsZWN0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24uICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjQwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9uZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogIjYwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMDAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkNvb2tpZXMsIE1vYmlsZSBEZXZpY2UgSURzIGFuZCBPbmxpbmUgQWR2ZXJ0aXNpbmc6IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJDb29raWVzOiBXZSB1c2UgY29va2llcywgcGl4ZWwgdGFncywgd2ViIGJlYWNvbnMsIG1vYmlsZSBkZXZpY2UgSURzLCDigJxmbGFzaCBjb29raWVz4oCdIGFuZCBzaW1pbGFyIGZpbGVzIG9yIHRlY2hub2xvZ2llcyB0byBjb2xsZWN0IGFuZCBzdG9yZSB0aGUgaW5mb3JtYXRpb24gd2UgYXV0b21hdGljYWxseSBjb2xsZWN0IGFib3V0IHlvdXIgY29tcHV0ZXIsIGRldmljZSwgYW5kIFNlcnZpY2VzIHVzYWdlLiBBIGNvb2tpZSBpcyBhIHNtYWxsIHRleHQgZmlsZSB0aGF0IGlzIHN0b3JlZCBvbiB5b3VyIGNvbXB1dGVyIHRoYXQgZW5hYmxlcyB1cyB0byByZWNvZ25pemUgeW91IHdoZW4geW91IHZpc2l0IG91ciB3ZWJzaXRlLCBzdG9yZSB5b3VyIHByZWZlcmVuY2VzIGFuZCBzZXR0aW5ncywgZW5oYW5jZSB5b3VyIGV4cGVyaWVuY2UgYnkgZGVsaXZlcmluZyBjb250ZW50IHNwZWNpZmljIHRvIHlvdXIgaW50ZXJlc3RzLCBwZXJmb3JtIHJlc2VhcmNoIGFuZCBhbmFseXRpY3MsIHRyYWNrIHlvdXIgdXNlIG9mIG91ciBTZXJ2aWNlcywgYW5kIGFzc2lzdCB3aXRoIHNlY3VyaXR5IGFuZCBhZG1pbmlzdHJhdGl2ZSBmdW5jdGlvbnMuIFRvIHVuZGVyc3RhbmQgbW9yZSBhYm91dCBjb29raWVzLCBjbGljayBoZXJlLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJNb3N0IGJyb3dzZXJzIGFyZSBzZXQgdG8gYXV0b21hdGljYWxseSBhbGxvdyBjb29raWVzLiBIb3dldmVyLCBpZiB5b3Ugd291bGQgbGlrZSB0byByZW1vdmUgY29va2llcyBmcm9tIHlvdXIgYnJvd3NlciwgeW91IGNhbiBkZWxldGUgb3IgZGlzYWJsZSB0aGVtIGJ5IGNvbnN1bHRpbmcgeW91ciBicm93c2Vy4oCZcyDigJxoZWxw4oCdIG1lbnUuIElmIHlvdSBjaG9vc2UgdG8gZGVjbGluZSBvciByZW1vdmUgY29va2llcywgcGxlYXNlIG5vdGUgdGhhdCB0aGlzIG1heSBhZmZlY3QgdGhlIHF1YWxpdHkgb2YgdGhlIHNlcnZpY2VzLiBJbiBhZGRpdGlvbiwgZGVsZXRpbmcgb3IgZGlzYWJsaW5nIGNvb2tpZXMgb24gb25lIGJyb3dzZXIgaXMgdW5saWtlbHkgdG8gZGVsZXRlIHRoZW0gb24gb3RoZXIgYnJvd3NlcnMgb3Igb3RoZXIgY29tcHV0ZXJzLiBUaHVzLCB5b3UgbWF5IGhhdmUgdG8gZGVsZXRlIG9yIGRpc2FibGUgY29va2llcyBpbiBtb3JlIHRoYW4gb25lIGxvY2F0aW9uLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJNYWpvciBicm93c2VycyBwcm92aWRlIHVzZXJzIHdpdGggdmFyaW91cyBvcHRpb25zIHdoZW4gaXQgY29tZXMgdG8gY29va2llcy4gVXNlcnMgY2FuIHVzdWFsbHkgc2V0IHRoZWlyIGJyb3dzZXJzIHRvIGJsb2NrIGFsbCB0aGlyZC1wYXJ0eSBjb29raWVzICh3aGljaCBhcmUgdGhvc2Ugc2V0IGJ5IHRoaXJkLXBhcnR5IGNvbXBhbmllcyBjb2xsZWN0aW5nIGluZm9ybWF0aW9uIG9uIHdlYnNpdGVzIG9wZXJhdGVkIGJ5IG90aGVyIGNvbXBhbmllcyksIGJsb2NrIGFsbCBjb29raWVzIChpbmNsdWRpbmcgZmlyc3QtcGFydHkgY29va2llcyBzdWNoIGFzIHRoZSBvbmVzIENvbnN1bWVyIFNlYXJjaCB1c2VzIHRvIGNvbGxlY3Qgc2VhcmNoIGFjdGl2aXR5IGluZm9ybWF0aW9uIGFib3V0IGl0cyB1c2VycyksIG9yIGJsb2NrIHNwZWNpZmljIGNvb2tpZXMuIFRvIG1vZGlmeSB5b3VyIGNvb2tpZSBzZXR0aW5ncywgcGxlYXNlIHJlZmVyIHRvIHRoZSBmb2xsb3dpbmcgc3VwcG9ydCBwYWdlcyBmb3IgZWFjaCBicm93c2VyIHlvdSB1c2UgdG8gYWNjZXNzIHRoZSBDb25zdW1lclNlYXJjaCB3ZWJzaXRlOiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJsaXN0X3N0eSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkludGVybmV0IEV4cGxvcmVyIGhlbHA6IiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgY29sb3I6ICIjMjE2Q0ZGIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cDovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9rYi8yNzg4MzUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgaHR0cDovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9rYi8yNzg4MzUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJGaXJlZm94IGhlbHA6IiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgY29sb3I6ICIjMjE2Q0ZGIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cDovL2tiLm1vemlsbGF6aW5lLm9yZy9Db29raWVzI0ZpcmVmb3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgaHR0cDovL2tiLm1vemlsbGF6aW5lLm9yZy9Db29raWVzI0ZpcmVmb3giCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTYWZhcmkgaGVscDoiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogIiMyMTZDRkYiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cDovL3N1cHBvcnQuYXBwbGUuY29tL2tiL1BINTA0MiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBodHRwOi8vc3VwcG9ydC5hcHBsZS5jb20va2IvUEg1MDQyIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkNocm9tZSBoZWxwOiIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAiIzIxNkNGRiIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHA6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vY2hyb21lL2Jpbi9hbnN3ZXIucHk/aGw9ZW4mYW5zd2VyPTk1NjQ3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGh0dHA6Ly9zdXBwb3J0Lmdvb2dsZS5jb20vY2hyb21lL2Jpbi9hbnN3ZXIucHk/aGw9ZW4mYW5zd2VyPTk1NjQ3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgQSBwaXhlbCB0YWcgKGFsc28gY2FsbGVkIGEgd2ViIGJlYWNvbiBvciBjbGVhciBHSUYpIGlzIGEgdGlueSBncmFwaGljIHdpdGggYSB1bmlxdWUgaWRlbnRpZmllciwgZW1iZWRkZWQgaW52aXNpYmx5IG9uIGEgd2VicGFnZSAob3IgYW4gb25saW5lIGFkIG9yIGVtYWlsKSwgYW5kIGlzIHVzZWQgdG8gY291bnQgb3IgdHJhY2sgdGhpbmdzIGxpa2UgYWN0aXZpdHkgb24gYSB3ZWJwYWdlIG9yIGFkIGltcHJlc3Npb25zIG9yIGNsaWNrcywgYXMgd2VsbCBhcyB0byBhY2Nlc3MgY29va2llcyBzdG9yZWQgb24gdXNlcnPigJkgY29tcHV0ZXJzLiBCdXllclJldmlld3Mub3JnIHBpeGVsIHRhZ3MgYXJlIHVzZWQgdG8gbWVhc3VyZSB0aGUgcG9wdWxhcml0eSBvZiBvdXIgdmFyaW91cyBwYWdlcywgZmVhdHVyZXMgYW5kIHNlcnZpY2VzLiBBZHZlcnRpc2luZyBjb21wYW55IHBpeGVsIHRhZ3MgYXJlIHVzZWQgdG8gbWVhc3VyZSB0aGUgbnVtYmVyIG9mIGFkIGltcHJlc3Npb25zIGFuZCB0aGUgcGVyZm9ybWFuY2Ugb2YgYWRzIG9uIG91ciBzaXRlLCBhbmQgdG8gYWNjZXNzIHRoZSBhZHZlcnRpc2luZyBjb21wYW554oCZcyBjb29raWVzIHBsYWNlZCBvbiB5b3VyIGNvbXB1dGVyLiBEYXRhIGFuYWx5dGljcyBjb21wYW55IHBpeGVsIHRhZ3MgYXJlIHVzZWQgdG8gYWdncmVnYXRlIGluZm9ybWF0aW9uIGFib3V0IG91ciBhZHZlcnRpc2luZyBhbmQgeW91ciBlbmdhZ2VtZW50IHdpdGggb3VyIHNpdGUgZm9yIG1hcmtldCByZXNlYXJjaCwgcHJvZHVjdCBpbXByb3ZlbWVudCwgcmV2ZW51ZSB0cmFja2luZyBhbmQgYWR2ZXJ0aXNpbmcgb3B0aW1pemF0aW9uLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgVGhpcmQgcGFydGllcyB3aG9zZSBwcm9kdWN0cyBvciBzZXJ2aWNlcyBhcmUgYWNjZXNzaWJsZSBvciBhZHZlcnRpc2VkIHRocm91Z2ggdGhlIFNlcnZpY2VzLCBpbmNsdWRpbmcgc29jaWFsIG5ldHdvcmtpbmcgc2VydmljZXMsIG1heSBhbHNvIHVzZSBjb29raWVzIG9yIHNpbWlsYXIgdG9vbHMsIGFuZCB3ZSBhZHZpc2UgeW91IHRvIGNoZWNrIHRoZWlyIHByaXZhY3kgcG9saWNpZXMgZm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZWlyIGNvb2tpZXMgYW5kIG90aGVyIHByYWN0aWNlcy4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAgMjBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIE9ubGluZSBhbmQgTW9iaWxlIEFkdmVydGlzaW5nOiBBZHZlcnRpc2VycyBhbmQgYWR2ZXJ0aXNpbmcgbmV0d29ya3MgcGxhY2UgYWRzIChpbmNsdWRpbmcgc3BvbnNvcmVkIGxpbmtzIGluIHNlYXJjaCByZXN1bHRzKSBvbiBvdXIgd2Vic2l0ZS4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAgMjBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIFRoZXNlIGNvbXBhbmllcyBhcyB3ZWxsIGFzIGRhdGEgYW5hbHl0aWNzIGNvbXBhbmllcyB3aG8gc2VydmljZSB0aGVtIG1heSBjb2xsZWN0IGluZm9ybWF0aW9uLCBzdWNoIGFzIHlvdXIgY29tcHV0ZXLigJlzIElQIGFkZHJlc3MsIGJyb3dzZXIgaW5mb3JtYXRpb24sIG1vYmlsZSBkZXZpY2UgSUQsIGFuZCBzZWFyY2ggcXVlcmllcywgYXMgeW91IHVzZSBvdXIgU2VydmljZXMuIFRoZXNlIGNvbXBhbmllcyBhbHNvIG1heSB1c2Ugd2ViIHRlY2hub2xvZ2llcyBzdWNoIGFzIGNvb2tpZXMgYW5kIHBpeGVsIHRhZ3MgdG8gY29sbGVjdCBkYXRhIGFib3V0IHlvdSB3aGVuIHlvdSB2aXNpdCBvdXIgc2l0ZS4gQ29va2llcyBmcm9tIGFkdmVydGlzaW5nIGNvbXBhbmllcyBlbmFibGUgdGhlbSB0byB0cmFjayB5b3VyIGFjdGl2aXR5IGFjcm9zcyB2YXJpb3VzIHNpdGVzIHdoZXJlIHRoZXkgZGlzcGxheSBhZHMgYW5kIHJlY29yZCB5b3VyIGFjdGl2aXRpZXMsIHNvIHRoZXkgY2FuIHNob3cgYWRzIHRoYXQgdGhleSBjb25zaWRlciByZWxldmFudCB0byB5b3UuIFlvdSBtYXkgb3B0LW91dCBvZiByZWNlaXZpbmcgdGFyZ2V0ZWQgb25saW5lIGFkdmVydGlzaW5nIGZyb20gYWR2ZXJ0aXNpbmcgbmV0d29ya3MgdGhhdCBpcyBkZWxpdmVyZWQgb24gQnV5ZXJSZXZpZXdzLm9yZyBhbmQgb3RoZXIgd2Vic2l0ZXMuIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgcmlnaHQgdG8gb3B0LW91dCBvZiByZWNlaXZpbmcgdGFyZ2V0ZWQgb25saW5lIGFkdmVydGlzaW5nIHBsZWFzZSB2aXNpdCB0aGUgZm9sbG93aW5nIHdlYnNpdGVzOiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJsaXN0X3N0eSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgY29sb3I6ICIjMjE2Q0ZGIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cDovL3d3dy5uZXR3b3JrYWR2ZXJ0aXNpbmcub3JnL21hbmFnaW5nL29wdF9vdXQuYXNwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cDovL3d3dy5uZXR3b3JrYWR2ZXJ0aXNpbmcub3JnL21hbmFnaW5nL29wdF9vdXQuYXNwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBjb2xvcjogIiMyMTZDRkYiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiaHR0cDovL3d3dy5hYm91dGFkcy5pbmZvIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJodHRwOi8vd3d3LmFib3V0YWRzLmluZm8iKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCA2MHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgSWYgeW91IGFyZSB1c2luZyBhIG1vYmlsZSBkZXZpY2UsIHdlIHVzZSB5b3VyIHVuaXF1ZSBtb2JpbGUgZGV2aWNlIElEIG51bWJlciB0byByZWNvZ25pemUgeW91IHdoZW4geW91IGFjY2VzcyBvdXIgc2l0ZSwgdG8gc3RvcmUgeW91ciBwcmVmZXJlbmNlcyBhbmQgc2V0dGluZ3MgYW5kIHRvIHRyYWNrIHlvdXIgdXNlIG9mIG91ciBTZXJ2aWNlcy4gQWR2ZXJ0aXNpbmcgY29tcGFuaWVzIG1heSBhbHNvIHVzZSBhbmQgc3RvcmUgeW91ciBtb2JpbGUgZGV2aWNlIElEIHRvIHRyYWNrIHlvdXIgdXNlIG9mIHRoZSBTZXJ2aWNlcywgdHJhY2sgdGhlIG51bWJlciBvZiBhZHMgZGlzcGxheWVkLCBtZWFzdXJlIGFkIHBlcmZvcm1hbmNlIGFuZCBzaG93IGFkcyB0aGF0IHRoZXkgY29uc2lkZXIgcmVsZXZhbnQgdG8geW91IGluIHZhcmlvdXMgbW9iaWxlIHNlcnZpY2VzIHRoYXQgeW91IHVzZS4gSWYgeW91IGFyZSB1c2luZyBhbiBpT1MgZGV2aWNlIGFuZCB5b3UgZG8gbm90IHdhbnQgdG8gcmVjZWl2ZSB0YWlsb3JlZCBpbi1hcHBsaWNhdGlvbiBhZHMgdGhhdCByZWxhdGUgdG8geW91ciBpbnRlcmVzdHMsIHlvdSBtYXkgb3B0LW91dCBieSBhY2Nlc3NpbmcgdGhlIGZvbGxvd2luZyBsaW5rIG9uIHlvdXIgZGV2aWNlOiBodHRwOi8vb28uYXBwbGUuY29tLiBJZiB5b3UgYXJlIHVzaW5nIGFuIGlPUzYgZGV2aWNlLCB5b3UgYWxzbyBtYXkgbGltaXQgdGhlIGRlbGl2ZXJ5IG9mIHRhaWxvcmVkIGFkcyBieTogT3BlbiBTZXR0aW5ncyBhbmQgdGFwIOKAnEdlbmVyYWzigJ0gdGhlbiB0YXAg4oCcQWJvdXTigJ07IFNjcm9sbCB0byB0aGUgYm90dG9tIG9mIEFib3V0IGFuZCB0YXAg4oCcQWR2ZXJ0aXNpbmfigJ07IEZsaXAg4oCcTGltaXQgQWQgVHJhY2tpbmfigJ0gdG8gT04uIElmIHlvdSBhcmUgdXNpbmcgYW4gQW5kcm9pZCBkZXZpY2UgYW5kIHlvdSBkbyBub3Qgd2lzaCB0byByZWNlaXZlIHRhaWxvcmVkIGluLWFwcGxpY2F0aW9uIGFkcywgeW91IGNhbiB2aXNpdCBHb29nbGXigJlzIEFkcyBQcmVmZXJlbmNlcyBwYWdlIGZyb20gYSBicm93c2VyIG9uIHlvdXIgZGV2aWNlIGFuZCBtYWtlIHlvdXIgY2hvaWNlcyB0aGVyZS4gV2UgZG8gbm90IGNvbnRyb2wgaG93IHRoZSBhcHBsaWNhYmxlIHBsYXRmb3JtIG9wZXJhdG9yIGFsbG93cyB5b3UgdG8gY29udHJvbCByZWNlaXZpbmcgdGFpbG9yZWQgaW4tYXBwbGljYXRpb24gYWRzOyB0aHVzLCB5b3Ugc2hvdWxkIGNvbnRhY3QgdGhlIHBsYXRmb3JtIHByb3ZpZGVyIGlmIHRoZSBhYm92ZSBvcHRpb25zIGFyZSBubyBsb25nZXIgYXZhaWxhYmxlLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9uZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogIjYwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMDAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiSG93IFdlIFVzZSB0aGUgSW5mb3JtYXRpb24gV2UgQ29sbGVjdCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAgMjBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIFdlIHVzZSB0aGUgaW5mb3JtYXRpb24gd2UgY29sbGVjdCBmcm9tIGFuZCBhYm91dCB5b3UgZm9yIGEgdmFyaWV0eSBvZiBwdXJwb3NlcywgaW5jbHVkaW5nIHRvOiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCA1MHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJsaXN0X3N0eSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiUmVzcG9uZCB0byB5b3VyIHF1ZXJpZXMuICIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiVW5kZXJzdGFuZCBvdXIgdXNlcnMgKHRoZWlyIGRlbW9ncmFwaGljcywgd2hhdCB0aGV5IGRvIG9uIG91ciBTZXJ2aWNlcywgd2hhdCBmZWF0dXJlcyB0aGV5IGxpa2UsIGhvdyB0aGV5IHVzZSB0aGVtLCBldGMuKSwgaW1wcm92ZSBvdXIgU2VydmljZXMsIHN1Y2ggYXMgYnkgcGVyc29uYWxpemluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29udGVudCB0byB5b3VyIGludGVyZXN0cywgcHJvY2VzcyBhbmQgY29tcGxldGUgeW91ciB0cmFuc2FjdGlvbnMsIGFuZCBtYWtlIHNwZWNpYWwgb2ZmZXJzLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkFkbWluaXN0ZXIgb3VyIFNlcnZpY2VzIGFuZCBkaWFnbm9zZSB0ZWNobmljYWwgcHJvYmxlbXMuICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiU2VuZCB5b3UgY29tbXVuaWNhdGlvbnMgdGhhdCB5b3UgaGF2ZSByZXF1ZXN0ZWQgb3IgdGhhdCBtYXkgYmUgb2YgaW50ZXJlc3QgdG8geW91LiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkVuYWJsZSB1cyB0byBzaG93IHlvdSBhZHMgb24gb3VyIHdlYnNpdGUgdGhhdCBtYXkgYmUgbW9yZSByZWxldmFudCB0byB5b3VyIGludGVyZXN0cy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAgMjBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJvbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb250LXdlaWdodCI6ICI2MDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiIzAwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkhvdyBXZSBTaGFyZSB0aGUgSW5mb3JtYXRpb24gV2UgQ29sbGVjdCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAgMjBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIFdlIHdpbGwgbm90IHNoYXJlIHRoZSBwZXJzb25hbCBpbmZvcm1hdGlvbiB3ZSBjb2xsZWN0IGFib3V0IHlvdSB3aXRoIGFueSB0aGlyZCBwYXJ0eSBmb3IgdGhlaXIgb3duIG1hcmtldGluZyBwdXJwb3NlcyB3aXRob3V0IHlvdXIgY29uc2VudC4gV2Ugd2lsbCBzaGFyZSB5b3VyIGluZm9ybWF0aW9uIGluIHRoZSBmb2xsb3dpbmcgd2F5czogIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAgMTBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIFdlIHVzZSBvdXRzaWRlIHZlbmRvcnMgZm9yIGEgdmFyaWV0eSBvZiBwdXJwb3Nlcywgc3VjaCBhcyB0byBoZWxwIHVzIGFuYWx5emUgdXNlIG9mIG91ciBTZXJ2aWNlcy4gU29tZSBvZiBvdXIgcHJvZHVjdHMsIHNlcnZpY2VzIGFuZCBkYXRhYmFzZXMgYXJlIGhvc3RlZCBieSB0aGlyZCBwYXJ0eSBob3N0aW5nIHNlcnZpY2VzIHByb3ZpZGVycy4gV2UgYWxzbyBtYXkgdXNlIHZlbmRvcnMgZm9yIG90aGVyIHByb2plY3RzLCBzdWNoIGFzIGNvbmR1Y3Rpbmcgc3VydmV5cyBvciBvcmdhbml6aW5nIHN3ZWVwc3Rha2VzIGZvciB1cywgdGhhdCBpbnZvbHZlIGNvbGxlY3Rpb24gb2YgaW5mb3JtYXRpb24gZnJvbSBvdXIgdXNlcnMuIFdlIG1heSBzaGFyZSBpbmZvcm1hdGlvbiBhYm91dCB5b3Ugd2l0aCB0aGVzZSB2ZW5kb3JzIHRvIGVuYWJsZSB0aGVtIHRvIHBlcmZvcm0gdGhlaXIgc2VydmljZXMuIFdlIG1heSBzaGFyZSB5b3VyIGluZm9ybWF0aW9uIHdpdGggb3VyIGFmZmlsaWF0ZXMsIHdoaWNoIGFyZSBlbnRpdGllcyB1bmRlciBjb21tb24gb3duZXJzaGlwIG9yIGNvbnRyb2wgb2Ygb3VyIHVsdGltYXRlIHBhcmVudCBjb21wYW55IElBQy9JbnRlckFjdGl2ZUNvcnAuIFdlIG1heSBkaXNjbG9zZSBkYXRhIHdlIGNvbGxlY3QgYWJvdXQgeW91IHdoZW4gd2UgYmVsaWV2ZSBkaXNjbG9zdXJlIGlzIG5lY2Vzc2FyeSB0byBpbnZlc3RpZ2F0ZSwgcHJldmVudCwgb3IgcmVzcG9uZCB0byBzdXNwZWN0ZWQgaWxsZWdhbCBvciBmcmF1ZHVsZW50IGFjdGl2aXR5IG9yIHRvIHByb3RlY3QgdGhlIHNhZmV0eSwgcmlnaHRzLCBvciBwcm9wZXJ0eSBvZiB1cywgb3VyIHVzZXJzLCBvciBvdGhlcnMuICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDEwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBJZiByZXF1ZXN0ZWQgb3IgcmVxdWlyZWQgYnkgZ292ZXJubWVudCBhdXRob3JpdGllcywgc3VjaCBhcyBsYXcgZW5mb3JjZW1lbnQgYXV0aG9yaXRpZXMsIGNvdXJ0cywgb3IgcmVndWxhdG9ycywgb3Igb3RoZXJ3aXNlIHRvIGNvbXBseSB3aXRoIHRoZSBsYXcsIHdlIG1heSBkaXNjbG9zZSBhbnkgaW5mb3JtYXRpb24gd2UgaGF2ZSBhYm91dCBvdXIgdXNlcnMuIFdlIGFsc28gbWF5IGRpc2Nsb3NlIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBhYm91dCB5b3UgaW4gb3JkZXIgdG8gZXhlcmNpc2Ugb3IgcHJvdGVjdCBsZWdhbCByaWdodHMgb3IgZGVmZW5kIGFnYWluc3QgbGVnYWwgY2xhaW1zLiBXZSBtYXkgdHJhbnNmZXIgeW91ciBpbmZvcm1hdGlvbiB0byBhIHRoaXJkIHBhcnR5IGlmIHdlIG9yIGFueSBvZiBvdXIgYWZmaWxpYXRlcyBhcmUgaW52b2x2ZWQgaW4gYSBjb3Jwb3JhdGUgcmVzdHJ1Y3R1cmluZyAoZS5nLiwgYSBzYWxlLCBtZXJnZXIsIG9yIG90aGVyIHRyYW5zZmVyIG9mIHNvbWUgb3IgYWxsIG9mIG91ciBhc3NldHMpLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAxMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgQWR2ZXJ0aXNlcnMgYW5kIGFkdmVydGlzaW5nIG5ldHdvcmtzIHBsYWNlIGFkcyAoaW5jbHVkaW5nIHNwb25zb3JlZCBsaW5rcyBpbiBzZWFyY2ggcmVzdWx0cykgb24gb3VyIHNpdGUuIFRoZXNlIGNvbXBhbmllcyBtYXkgY29sbGVjdCBpbmZvcm1hdGlvbiwgc3VjaCBhcyB5b3VyIGNvbXB1dGVy4oCZcyBJUCBhZGRyZXNzLCBicm93c2VyIGluZm9ybWF0aW9uLCBtb2JpbGUgZGV2aWNlIElELCBhbmQgc2VhcmNoIHF1ZXJpZXMsIGFzIHlvdSB1c2Ugb3VyIHdlYnNpdGUgYW5kIFNlcnZpY2VzLiBUaGV5IGFsc28gbWF5IHVzZSBjb29raWVzIGFuZCBvdGhlciB0ZWNobm9sb2dpZXMgdG8gY29sbGVjdCB0aGlzIGluZm9ybWF0aW9uIHdoZW4geW91IHZpc2l0IG91ciBzaXRlLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAxMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgV2UgbWF5IHVzZSBhbmQgZGlzY2xvc2Ugbm9uLXBlcnNvbmFsIGluZm9ybWF0aW9uIChlLmcuLCBkZS1pZGVudGlmaWVkIG9yIGFnZ3JlZ2F0ZSBkYXRhKSB0byB0aGlyZCBwYXJ0aWVzLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjUwcHggMCAyMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9uZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvbnQtd2VpZ2h0IjogIjYwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMDAwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlJldmlld2luZywgY2hhbmdpbmcgb3IgZGVsZXRpbmcgaW5mb3JtYXRpb24iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDIwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBJZiB5b3Ugd291bGQgbGlrZSB0byByZXZpZXcsIGNoYW5nZSBvciBkZWxldGUgcGVyc29uYWwgaW5mb3JtYXRpb24gd2UgaGF2ZSBjb2xsZWN0ZWQgZnJvbSB5b3UsIHBsZWFzZSBjb250YWN0IHRoZSBCdXllclJldmlld3Mub3JnIFByaXZhY3kgT2ZmaWNlcjogIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICIxMHB4IDAgNjBweCAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMjE2Q0ZGIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQnV5ZXJSZXZpZXdzLm9yZyAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgc3VwcG9ydEBCdXllclJldmlld3Mub3JnICIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDIwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb25nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQiOiAiNjAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIiMwMDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTZWN1cml0eSIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAgNTBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIFdlIGhhdmUgaW1wbGVtZW50ZWQgY29tbWVyY2lhbGx5IHJlYXNvbmFibGUgc2VjdXJpdHkgbWVhc3VyZXMgdGhhdCBhcmUgZGVzaWduZWQgdG8gcHJldmVudCB1bmF1dGhvcml6ZWQgb3IgdW5sYXdmdWwgYWNjZXNzIHRvIGFuZCBtaXN1c2Ugb2YgdGhlIGluZm9ybWF0aW9uIHdlIGNvbGxlY3QsIGluY2x1ZGluZyB0ZWNobm9sb2dpY2FsIGFuZCBwaHlzaWNhbCBzZWN1cml0eSBtZWFzdXJlcyBhcyB3ZWxsIGFzIHByb2NlZHVyYWwgc2FmZWd1YXJkcy4gSG93ZXZlciwgYmVjYXVzZSBubyBzZWN1cml0eSBzeXN0ZW0gY2FuIGJlIDEwMCUgZWZmZWN0aXZlLCB3ZSBjYW5ub3QgY29tcGxldGVseSBndWFyYW50ZWUgdGhlIHNlY3VyaXR5IG9mIGFueSBpbmZvcm1hdGlvbiB3ZSBtYXkgaGF2ZSBjb2xsZWN0ZWQgZnJvbSBvciBhYm91dCB5b3UuICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDIwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3Ryb25nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQiOiAiNjAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIiMwMDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJIb3cgTG9uZyBXZSBLZWVwIERhdGEgQWJvdXQgWW91IildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCA2MHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgV2UgcmV0YWluIHRoZSBpbmZvcm1hdGlvbiB3ZSBjb2xsZWN0IGFib3V0IGFuZCBmcm9tIHlvdSBmb3IgYXMgbG9uZyBhcyBuZWNlc3NhcnkgdG8gZnVsZmlsbCBhIGJ1c2luZXNzIHB1cnBvc2Ugb3IgY29tcGx5IHdpdGggYSBsZWdhbCByZXF1ZXN0LiBXZSBtYXkgYWxzbyBjaG9vc2UgdG8gYW5vbnltaXplIGNlcnRhaW4gb2YgdGhlIGluZm9ybWF0aW9uIHlvdSBwcm92aWRlIHRvIHVzIHNvIHRoYXQgaXQgY2FuIG5vIGxvbmdlciBiZSBhdHRyaWJ1dGVkIHRvIHlvdSBpZiB3ZSB3b3VsZCBsaWtlIHRvIHJldGFpbiBpdCBmb3IgbG9uZ2VyIHBlcmlvZHMgb2YgdGltZS4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIxMHB4IDAgMjBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJvbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb250LXdlaWdodCI6ICI2MDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiIzAwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNoaWxkcmVuIFVuZGVyIDEzIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjEwcHggMCAxMHB4IDAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgVGhlIFNlcnZpY2VzIGFyZSBub3QgaW50ZW5kZWQgZm9yIHVzZXJzIHVuZGVyIHRoZSBhZ2Ugb2YgMTMuIFdlIGRvIG5vdCBrbm93aW5nbHkgY29sbGVjdCBhbnkgcGVyc29uYWwgaW5mb3JtYXRpb24gZnJvbSBjaGlsZHJlbiB1bmRlciAxMyBvciBtYXJrZXQgdG8gb3Igc29saWNpdCBpbmZvcm1hdGlvbiBmcm9tIGFueW9uZSB1bmRlciB0aGUgYWdlIG9mIDEzLiBJZiB3ZSBiZWNvbWUgYXdhcmUgdGhhdCBhIHBlcnNvbiBzdWJtaXR0aW5nIHBlcnNvbmFsIGluZm9ybWF0aW9uIGlzIHVuZGVyIDEzLCB3ZSB3aWxsIGF0dGVtcHQgdG8gZGVsZXRlIGFueSByZWxhdGVkIGluZm9ybWF0aW9uIGFzIHNvb24gYXMgcG9zc2libGUuIFlvdSBoZXJlYnkgcmVwcmVzZW50IHRoYXQgeW91IGFyZSBhdCBsZWFzdCAxMy4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICI2MHB4IDAgMjBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJvbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb250LXdlaWdodCI6ICI2MDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiIzAwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnNlbnQgdG8gVHJhbnNmZXIgb2YgSW5mb3JtYXRpb24iKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDEwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBJZiB5b3UgYXJlIHZpc2l0aW5nIHRoZSBTZXJ2aWNlcyBmcm9tIG91dHNpZGUgdGhlIFVuaXRlZCBTdGF0ZXMsIHlvdXIgZGF0YSB3aWxsIGJlIHRyYW5zZmVycmVkIHRvIGFuZCBzdG9yZWQgaW4gb3VyIHNlcnZlcnMgaW4gdGhlIFUuUy4gQnkgdXNpbmcgdGhlIFNlcnZpY2VzLCB5b3UgY29uc2VudCB0byBvdXIgY29sbGVjdGlvbiBhbmQgdXNlIG9mIHlvdXIgZGF0YSBhcyBkZXNjcmliZWQgaW4gdGhpcyBQcml2YWN5IFBvbGljeS4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICI2MHB4IDAgMjBweCAwIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJvbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb250LXdlaWdodCI6ICI2MDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiIzAwMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnRhY3QgVXMiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljU3R5bGU6IHsgbWFyZ2luOiAiMTBweCAwIDIwcHggMCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIklmIHlvdSBoYXZlIGFueSBxdWVzdGlvbiBhYm91dCBvdXIgcHJpdmFjeSBwcmFjdGljZXMsIHlvdSBjYW4gY29udGFjdCB1cyBieSB3cml0aW5nIHRvIG91ciBQcml2YWN5IE9mZmljZXIgYXQ6IgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICIxMHB4IDAgMTBweCAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMjE2Q0ZGIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQnV5ZXJSZXZpZXdzLm9yZyIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}