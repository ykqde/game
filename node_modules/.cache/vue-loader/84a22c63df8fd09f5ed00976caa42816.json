{"remainingRequest":"C:\\Users\\Lenovo\\Desktop\\drug2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Lenovo\\Desktop\\drug2.0\\src\\views\\MaleEnhancement\\offer.vue?vue&type=template&id=d75cdd7c&scoped=true&","dependencies":[{"path":"C:\\Users\\Lenovo\\Desktop\\drug2.0\\src\\views\\MaleEnhancement\\offer.vue","mtime":1654843612996},{"path":"C:\\Users\\Lenovo\\Desktop\\drug2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651916147496},{"path":"C:\\Users\\Lenovo\\Desktop\\drug2.0\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651916150240},{"path":"C:\\Users\\Lenovo\\Desktop\\drug2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651916147496},{"path":"C:\\Users\\Lenovo\\Desktop\\drug2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1651916149653}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}