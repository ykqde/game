{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\drug2.0\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\drug2.0\\src\\views\\disclosure\\disclosure.vue?vue&type=template&id=1c9b7625&scoped=true&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\drug2.0\\src\\views\\disclosure\\disclosure.vue","mtime":1653876398144},{"path":"C:\\Users\\Administrator\\Desktop\\drug2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651916147496},{"path":"C:\\Users\\Administrator\\Desktop\\drug2.0\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1651916150240},{"path":"C:\\Users\\Administrator\\Desktop\\drug2.0\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651916147496},{"path":"C:\\Users\\Administrator\\Desktop\\drug2.0\\node_modules\\vue-loader\\lib\\index.js","mtime":1651916149653}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}